//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `private.pem`.
    static let privatePem = Rswift.FileResource(bundle: R.hostingBundle, name: "private", pathExtension: "pem")
    /// Resource file `public.pem`.
    static let publicPem = Rswift.FileResource(bundle: R.hostingBundle, name: "public", pathExtension: "pem")
    /// Resource file `sitepublickey.pem`.
    static let sitepublickeyPem = Rswift.FileResource(bundle: R.hostingBundle, name: "sitepublickey", pathExtension: "pem")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "private", withExtension: "pem")`
    static func privatePem(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privatePem
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "public", withExtension: "pem")`
    static func publicPem(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.publicPem
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "sitepublickey", withExtension: "pem")`
    static func sitepublickeyPem(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sitepublickeyPem
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `ic_queue`.
    static let ic_queue = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_queue")
    /// Image `important`.
    static let important = Rswift.ImageResource(bundle: R.hostingBundle, name: "important")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `name_logo`.
    static let name_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "name_logo")
    /// Image `ok_button`.
    static let ok_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "ok_button")
    /// Image `round_logo`.
    static let round_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "round_logo")
    /// Image `square_logo`.
    static let square_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "square_logo")
    /// Image `tabBar_documents`.
    static let tabBar_documents = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBar_documents")
    /// Image `tabBar_home`.
    static let tabBar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBar_home")
    /// Image `tabBar_queue`.
    static let tabBar_queue = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBar_queue")
    
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_queue", bundle: ..., traitCollection: ...)`
    static func ic_queue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_queue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "important", bundle: ..., traitCollection: ...)`
    static func important(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.important, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "name_logo", bundle: ..., traitCollection: ...)`
    static func name_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.name_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ok_button", bundle: ..., traitCollection: ...)`
    static func ok_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ok_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "round_logo", bundle: ..., traitCollection: ...)`
    static func round_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.round_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "square_logo", bundle: ..., traitCollection: ...)`
    static func square_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.square_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBar_documents", bundle: ..., traitCollection: ...)`
    static func tabBar_documents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBar_documents, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBar_home", bundle: ..., traitCollection: ...)`
    static func tabBar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBar_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBar_queue", bundle: ..., traitCollection: ...)`
    static func tabBar_queue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBar_queue, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `QueueSectionHeader`.
    static let queueSectionHeader = _R.nib._QueueSectionHeader()
    
    /// `UINib(name: "QueueSectionHeader", in: bundle)`
    static func queueSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.queueSectionHeader)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MainQueueNumberTableRow`.
    static let mainQueueNumberTableRow: Rswift.ReuseIdentifier<MainQueueNumberTableRow> = Rswift.ReuseIdentifier(identifier: "MainQueueNumberTableRow")
    /// Reuse identifier `QueueLoadCell`.
    static let queueLoadCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "QueueLoadCell")
    /// Reuse identifier `QueueTableViewCell`.
    static let queueTableViewCell: Rswift.ReuseIdentifier<QueueTableViewCell> = Rswift.ReuseIdentifier(identifier: "QueueTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _QueueSectionHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QueueSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QueueSectionHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QueueSectionHeader
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try auth.validate()
      try launchScreen.validate()
    }
    
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let authNavigationViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "AuthNavigationViewController")
      let authViewController = StoryboardViewControllerResource<AuthViewController>(identifier: "AuthViewController")
      let bundle = R.hostingBundle
      let loadingViewController = StoryboardViewControllerResource<LoadingViewController>(identifier: "LoadingViewController")
      let name = "Auth"
      let registerStepOneViewController = StoryboardViewControllerResource<RegisterStepOneViewController>(identifier: "RegisterStepOneViewController")
      let registerViewControllerChooseDate = StoryboardViewControllerResource<RegisterViewControllerChooseDate>(identifier: "RegisterViewControllerChooseDate")
      let registerViewControllerQuestionHint = StoryboardViewControllerResource<RegisterViewControllerQuestionHint>(identifier: "RegisterViewControllerQuestionHint")
      
      func authNavigationViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authNavigationViewController)
      }
      
      func authViewController(_: Void = ()) -> AuthViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authViewController)
      }
      
      func loadingViewController(_: Void = ()) -> LoadingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loadingViewController)
      }
      
      func registerStepOneViewController(_: Void = ()) -> RegisterStepOneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerStepOneViewController)
      }
      
      func registerViewControllerChooseDate(_: Void = ()) -> RegisterViewControllerChooseDate? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewControllerChooseDate)
      }
      
      func registerViewControllerQuestionHint(_: Void = ()) -> RegisterViewControllerQuestionHint? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewControllerQuestionHint)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ok_button") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ok_button' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "name_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'name_logo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "round_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'round_logo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if _R.storyboard.auth().authNavigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authNavigationViewController' could not be loaded from storyboard 'Auth' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.auth().registerStepOneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerStepOneViewController' could not be loaded from storyboard 'Auth' as 'RegisterStepOneViewController'.") }
        if _R.storyboard.auth().registerViewControllerQuestionHint() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewControllerQuestionHint' could not be loaded from storyboard 'Auth' as 'RegisterViewControllerQuestionHint'.") }
        if _R.storyboard.auth().authViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authViewController' could not be loaded from storyboard 'Auth' as 'AuthViewController'.") }
        if _R.storyboard.auth().loadingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loadingViewController' could not be loaded from storyboard 'Auth' as 'LoadingViewController'.") }
        if _R.storyboard.auth().registerViewControllerChooseDate() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewControllerChooseDate' could not be loaded from storyboard 'Auth' as 'RegisterViewControllerChooseDate'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "round_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'round_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "mainNavigationController")
      let mainTabBarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "mainTabBarController")
      let name = "Main"
      let queueViewController = StoryboardViewControllerResource<QueueViewController>(identifier: "QueueViewController")
      
      func mainNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainNavigationController)
      }
      
      func mainTabBarController(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }
      
      func queueViewController(_: Void = ()) -> QueueViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: queueViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tabBar_documents") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBar_documents' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBar_home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBar_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabBar_queue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabBar_queue' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.main().queueViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'queueViewController' could not be loaded from storyboard 'Main' as 'QueueViewController'.") }
        if _R.storyboard.main().mainNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainNavigationController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
